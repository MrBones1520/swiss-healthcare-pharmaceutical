
buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core/" }
        //maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.2"
        // classpath "org.grails.plugins:hibernate5"
        classpath "com.google.cloud.tools:appengine-gradle-plugin:1.3.2"
        //classpath "org.gretty:gretty:3.0.9"
    }

}

plugins {
    id "groovy"
    id "org.grails.grails-web"
    id "org.grails.plugins.views-json"
    id "idea"
    id "application"
    id "org.asciidoctor.jvm.convert"
    id "eclipse"
}

version "0.1"
group = "com.swiss.healthcare"


apply plugin: 'com.google.cloud.tools.appengine'
apply from: "gradle/asciidoc.gradle"

repositories {
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core/" }
}

configurations {
    configureEach {
        resolutionStrategy.force 'org.codehaus.groovy:groovy-xml:3.0.13'
    }
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    implementation("org.grails:grails-core")
    implementation("org.grails:grails-logging")
    implementation("org.grails:grails-plugin-databinding")
    implementation("org.grails:grails-plugin-i18n")
    implementation("org.grails:grails-plugin-interceptors")
    implementation("org.grails:grails-plugin-rest")
    implementation("org.grails:grails-plugin-services")
    implementation("org.grails:grails-plugin-url-mappings")
    implementation("org.grails:grails-web-boot")
    implementation("org.grails.plugins:hibernate5")
    implementation("org.grails.plugins:views-json")
    implementation("org.grails.plugins:views-json-templates")
    implementation("org.hibernate:hibernate-core:5.6.15.Final")
    implementation("org.springframework.boot:spring-boot-autoconfigure")
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-logging")
    implementation("org.springframework.boot:spring-boot-starter-tomcat")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    compileOnly("io.micronaut:micronaut-inject-groovy")
    console("org.grails:grails-console")
    runtimeOnly("com.h2database:h2")
    runtimeOnly('mysql:mysql-connector-java:8.0.28')
    runtimeOnly('com.google.cloud.sql:mysql-socket-factory-connector-j-6:1.0.3')
    runtimeOnly("javax.xml.bind:jaxb-api:2.3.1")
    runtimeOnly("org.apache.tomcat:tomcat-jdbc")
    //runtimeOnly("org.glassfish.web:el-impl:2.2.1-b05")
    testImplementation("io.micronaut:micronaut-inject-groovy")
    testImplementation("org.grails:grails-gorm-testing-support")
    testImplementation("org.grails:views-json-testing-support")
    testImplementation("org.spockframework:spock-core")
    testImplementation "org.testcontainers:testcontainers:1.19.4"
    //testImplementation("org.testcontainers:spock")
    //testImplementation("org.testcontainers:testcontainers")
    testImplementation("io.micronaut:micronaut-http-client")
}

//ext {
//   // dockerTag = "swiss-healthcare-api:${project.version}"
//    dockerBuildDir = mkdir("${buildDir}/docker")
//}

application {
    mainClass.set("com.swiss.healthcare.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

configurations {
    compile.exclude module: 'tomcat-juli'
    compile.exclude module: 'spring-boot-starter-tomcat'
    compile.exclude group: 'com.google.guava', module: "guava-jdk5"
}